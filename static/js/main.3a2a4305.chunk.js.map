{"version":3,"sources":["serviceWorker.js","components/card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","width","borderRadius","children","ErrorBoundry","state","hasError","this","setState","Component","App","fetch","then","response","json","searchField","onSearchChange","filteredRobots","filter","robot","toString","toLowerCase","includes","length","connect","dispatch","event","payload","target","value","initialState","store","createStore","action","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6QAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCJSC,EAZF,SAAC,GAA2B,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,GAC1B,OACI,yBAAKC,UAAU,gDACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,cACpB,6BACA,wBAAIC,UAAU,UAAUH,GACxB,uBAAGG,UAAU,UAAUF,MCOpBK,EAZE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGV,KAAMO,EAAOG,GAAGV,KAAMC,MAAOM,EAAOG,GAAGT,MAAOC,GAAIK,EAAOG,GAAGR,UCKtFU,G,MAXG,SAAC,GAAwB,IAArBC,EAAoB,EAApBA,aAClB,OACI,2BACAV,UAAU,KACVW,KAAK,OACLC,YAAY,SACZC,SAAWH,MCEJI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAQ,CAAEC,UAAW,SAAUC,OAAQ,OAAQC,MAAO,QAASC,aAAc,SAC7EL,EAAMM,WCqBJC,E,kDAvBX,WAAYP,GAAQ,IAAD,8BACf,cAAMA,IACDQ,MAAQ,CACTC,UAAU,GAHC,E,gEAQfC,KAAKC,SACD,CACIF,UAAU,M,+BAMlB,OAAIC,KAAKF,MAAMC,SACJ,2DAEJC,KAAKV,MAAMM,a,GApBCM,aCmBrBC,G,wDACF,aAAe,IAAD,8BACV,gBACKL,MAAQ,CACTnB,OAAQ,IAHF,E,gEAOO,IAAD,OAChByB,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC7EF,MAAK,SAAAxB,GAAI,OAAI,EAAKoB,SAAS,CAACtB,OAAQE,S,+BAG/B,IAAD,EACmCmB,KAAKV,MAArCkB,EADH,EACGA,YAAaC,EADhB,EACgBA,eACb9B,EAAWqB,KAAKF,MAAhBnB,OACF+B,EAAiB/B,EAAOgC,QAAO,SAAAC,GACrC,OAAOA,EAAMxC,KAAKyC,WAAWC,cAAcC,SAASP,EAAYK,WAAWC,kBAE3E,OAAQnC,EAAOqC,OAGP,yBAAKzC,UAAU,MACX,wBAAIA,UAAU,SAAd,eACA,6BACA,kBAAC,EAAD,CAAWU,aAAewB,IAC1B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU9B,OAAS+B,OARvC,wBAAInC,UAAU,MAAd,qB,GApBU2B,cAmCHe,eA/CS,SAACnB,GACrB,MAAO,CACHU,YAAaV,EAAMU,gBAIA,SAACU,GACxB,MAAO,CACJT,eAAgB,SAACU,GAAD,OAAWD,ECfO,CACxChC,KCHkC,sBDIlCkC,QDayDD,EAAME,OAAOC,YAuCxDL,CAA6Cd,G,QGtDtDoB,EAAe,CACpBf,YAAa,ICORgB,EAAQC,aDJc,WAAoC,IAAnC3B,EAAkC,uDAA5ByB,EAAcG,EAAc,uDAAP,GACvD,OAAOA,EAAOxC,MACb,IDRiC,sBCShC,OAAO,2BAAKY,GAAZ,IAAmBU,YAAakB,EAAON,UACxC,QACC,OAAOtB,MCCV6B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,QAGHM,SAASC,eAAe,SViHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3a2a4305.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ( { name, email, id } ) => {\r\n    return(\r\n        <div className='tc bg-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robot' src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n            <h2 className='rnames'>{name}</h2>\r\n            <p className='rnames'>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './card';\r\n\r\nconst CardList = ( {robots} ) => {\r\n    return(\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return <Card key={i} name={robots[i].name} email={robots[i].email} id={robots[i].id}/>\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './SearchBox.css';\r\nconst SearchBox = ( { searchChange } ) => {\r\n    return(\r\n        <input \r\n        className='xd'\r\n        type='text' \r\n        placeholder='Search'\r\n        onChange={ searchChange }\r\n        />\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={ { overflowY: 'scroll', height: '75vh', width: '100vw', borderRadius: '15px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false,\r\n        };\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState(\r\n            {\r\n                hasError: true\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1> Ooops!. That's not good :S</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;"," import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport { connect } from 'react-redux';\r\nimport '../components/styles.css'\r\nimport { setSearchField } from '../actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField: state.searchField\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n       onSearchChange: (event) => dispatch(setSearchField(event.target.value)) \r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json())\r\n        .then(user => this.setState({robots: user}));\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange } = this.props;\r\n        const { robots } = this.state;\r\n        const filteredRobots = robots.filter(robot => {\r\n        return robot.name.toString().toLowerCase().includes(searchField.toString().toLowerCase());\r\n        })\r\n        return !robots.length ?\r\n        <h1 className='tc'> Loading ... </h1>\r\n        :\r\n                <div className='tc'>\r\n                    <h1 className='title'>RoboFriends</h1>\r\n                    <hr/>\r\n                    <SearchBox searchChange={ onSearchChange }/>\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={ filteredRobots }/>\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n        }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD } from './constants';\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n});","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';","import { CHANGE_SEARCH_FIELD } from './constants';\n\nconst initialState = {\n\tsearchField: ''\n};\n\nexport const searchRobots = (state=initialState, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn { ...state, searchField: action.payload }\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\nimport { searchRobots } from './reducers';\n\nconst store = createStore(searchRobots);\n\nReactDOM.render(\n  <React.StrictMode>\n\t  <Provider store={store}>\n\t    <App />\n\t  </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}